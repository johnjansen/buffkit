	ctx.Step(`^I have a JSON API endpoint$`, iHaveAJSONAPIEndpoint)
	ctx.Step(`^I have registered a button component with variants$`, iHaveRegisteredAButtonComponentWithVariants)
	ctx.Step(`^I have registered a code component$`, iHaveRegisteredACodeComponent)
	ctx.Step(`^I have registered a form field component$`, iHaveRegisteredAFormFieldComponent)
	ctx.Step(`^I have registered a modal component$`, iHaveRegisteredAModalComponent)
	ctx.Step(`^I have registered a text component$`, iHaveRegisteredATextComponent)
	ctx.Step(`^I have registered multiple components$`, iHaveRegisteredMultipleComponents)
	ctx.Step(`^I render HTML containing \'<bk-button hx-post="([^"]*)" hx-target="([^"]*)">Save<\/bk-button>\'$`, iRenderHTMLContainingBkbuttonHxpostHxtargetSavebkbutton)
	ctx.Step(`^I render HTML containing \'<bk-button id="([^"]*)" data-turbo="([^"]*)">Submit<\/bk-button>\'$`, iRenderHTMLContainingBkbuttonIdDataturboSubmitbkbutton)
	ctx.Step(`^I render HTML containing \'<bk-button onclick="([^"]*)">Click<\/bk-button>\'$`, iRenderHTMLContainingBkbuttonOnclickClickbkbutton)
	ctx.Step(`^I render HTML containing \'<bk-button variant="([^"]*)" size="([^"]*)">Submit<\/bk-button>\'$`, iRenderHTMLContainingBkbuttonVariantSizeSubmitbkbutton)
	ctx.Step(`^I render HTML containing \'<bk-button variant="([^"]*)">Click<\/bk-button>\'$`, iRenderHTMLContainingBkbuttonVariantClickbkbutton)
	ctx.Step(`^I render HTML containing \'<bk-dropdown data-test-id="([^"]*)" data-track-event="([^"]*)">Menu<\/bk-dropdown>\'$`, iRenderHTMLContainingBkdropdownDatatestidDatatrackeventMenubkdropdown)
	ctx.Step(`^I render HTML containing \'<bk-dropdown x-data="([^"]*)">Menu<\/bk-dropdown>\'$`, iRenderHTMLContainingBkdropdownXdataMenubkdropdown)
	ctx.Step(`^I render HTML containing \'<bk-feature flag="([^"]*)">New feature content<\/bk-feature>\'$`, iRenderHTMLContainingBkfeatureFlagNewFeatureContentbkfeature)
	ctx.Step(`^I render HTML containing \'<bk-modal title="([^"]*)">Are you sure\?<\/bk-modal>\'$`, iRenderHTMLContainingBkmodalTitleAreYouSurebkmodal)
	ctx.Step(`^I render HTML containing \'<bk-tabs default-tab="([^"]*)">\.\.\.<\/bk-tabs>\'$`, iRenderHTMLContainingBktabsDefaulttabBktabs)
	ctx.Step(`^I render HTML containing \'<bk-text><script>alert\("([^"]*)"\)<\/script><\/bk-text>\'$`, iRenderHTMLContainingBktextscriptalertScriptbktext)
	ctx.Step(`^I render HTML containing multiple \'<bk-input label="([^"]*)" \/>\' components$`, iRenderHTMLContainingMultipleBkinputLabelComponents)
	ctx.Step(`^I render HTML with (\d+) component instances$`, iRenderHTMLWithComponentInstances)
	ctx.Step(`^the "([^"]*)" flag is enabled$`, theFlagIsEnabled)
	ctx.Step(`^the JSON should be returned unchanged$`, theJSONShouldBeReturnedUnchanged)
	ctx.Step(`^the component expansion should be skipped$`, theComponentExpansionShouldBeSkipped)
	ctx.Step(`^the component should be properly expanded$`, theComponentShouldBeProperlyExpanded)
	ctx.Step(`^the component should fetch user data during rendering$`, theComponentShouldFetchUserDataDuringRendering)
	ctx.Step(`^the component should not be expanded$`, theComponentShouldNotBeExpanded)
	ctx.Step(`^the custom component should be used for rendering$`, theCustomComponentShouldBeUsedForRendering)
	ctx.Step(`^the default component should be replaced$`, theDefaultComponentShouldBeReplaced)
	ctx.Step(`^the expansion should complete within (\d+)ms$`, theExpansionShouldCompleteWithinMs)
	ctx.Step(`^the original HTML should be preserved$`, theOriginalHTMLShouldBePreserved)
	ctx.Step(`^the output should contain HTML comments marking component boundaries$`, theOutputShouldContainHTMLCommentsMarkingComponentBoundaries)
	ctx.Step(`^the output should contain \'aria-expanded="([^"]*)"\'$`, theOutputShouldContainAriaexpanded)
	ctx.Step(`^the output should contain \'class="\'$`, theOutputShouldContainClass)
	ctx.Step(`^the output should contain \'data-initial-tab="([^"]*)"\'$`, theOutputShouldContainDatainitialtab)
	ctx.Step(`^the output should contain \'data-state="([^"]*)"\'$`, theOutputShouldContainDatastate)
	ctx.Step(`^the output should contain \'data-test-id="([^"]*)"\'$`, theOutputShouldContainDatatestid)
	ctx.Step(`^the output should contain \'data-track-event="([^"]*)"\'$`, theOutputShouldContainDatatrackevent)
	ctx.Step(`^the output should contain \'data-turbo="([^"]*)"\'$`, theOutputShouldContainDataturbo)
	ctx.Step(`^the output should contain \'hx-target="([^"]*)"\'$`, theOutputShouldContainHxtarget)
	ctx.Step(`^the output should contain \'id="([^"]*)"\'$`, theOutputShouldContainId)
	ctx.Step(`^the output should contain \'role="([^"]*)"\'$`, theOutputShouldContainRole)
	ctx.Step(`^the output should contain \'x-data="([^"]*)"\'$`, theOutputShouldContainXdata)
	ctx.Step(`^the output should contain appropriate classes for "([^"]*)"$`, theOutputShouldContainAppropriateClassesFor)
	ctx.Step(`^the output should contain data attributes for progressive enhancement$`, theOutputShouldContainDataAttributesForProgressiveEnhancement)
	ctx.Step(`^the output should contain expanded button HTML$`, theOutputShouldContainExpandedButtonHTML)
	ctx.Step(`^the output should contain expanded card HTML$`, theOutputShouldContainExpandedCardHTML)
	ctx.Step(`^the output should contain the rendered icon HTML$`, theOutputShouldContainTheRenderedIconHTML)
	ctx.Step(`^the output should contain the user\'s avatar URL$`, theOutputShouldContainTheUsersAvatarURL)
	ctx.Step(`^the output should not contain an actual script tag$`, theOutputShouldNotContainAnActualScriptTag)
	ctx.Step(`^the output should not contain component boundary comments$`, theOutputShouldNotContainComponentBoundaryComments)
	ctx.Step(`^the output should preserve the indentation$`, theOutputShouldPreserveTheIndentation)
	ctx.Step(`^the response content-type is "([^"]*)"$`, theResponseContenttypeIs)
